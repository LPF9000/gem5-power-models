# Power Modeling Data Visualization
# Date: 12/03/2023
# Title: Regular Expression for Power Modeling Data
# Author: Ryan Laur
#
# Description:
# This purpose of this script is to extract/visualize power modeling data from the stats.txt dump
# generated from gem5.
# The data is first generated by the gem5 build. The script differentiates
# power (watts) in both big and little CPU clusters for an ARM Full System,
# for both dynamic and static power measurements.
# For each category, relevant power values are extracted, and plotted to a graph.
# The graphs are saved as PNG files for export.

import re
import matplotlib.pyplot as plt


def extract_power_values(file_path, pattern):
    """
    Extract power values from the specified file.

    Args:
    - file_path: Path to the file containing power data.
    - pattern: Regular expression pattern to identify and extract power values.

    Returns:
    - A list of power values (float) extracted based on the given pattern.
    """
    power_values = []

    with open(file_path, 'r') as file:
        for line in file:
            match = re.search(pattern, line)
            if match:
                power_values.append(float(match.group(1)))

    return power_values


def plot_graph(power_values, title, filename):
    """
    Plot and save a graph of power values.

    Args:
    - power_values: List of power values for the graph (watts)
    - title: system.[CPU_Cluster_Type][Power Type] vs. Samples
    - filename: Name of png file for export

    The function generates a line graph with 'Samples' on the x-axis and 'Power (Watts)' on the y-axis.
    It exports the graph as a PNG file.
    """
    plt.figure()
    plt.plot(power_values, label=title)
    plt.xlabel('Samples')
    plt.ylabel('Power (Watts)')
    plt.title(title)
    plt.legend()
    plt.grid(True)
    plt.savefig(f"{filename}.png")
    plt.show()


def main():
    """
    Main function to loop through all power models.

    This function sets up parameters for extracting and plotting power data.
    It iterates over combinations of CPU clusters, power types, and power management states,
    extracts relevant power data, and plots the data.
    """
    file_path = "stats.txt"  # Path to your stats.txt file
    clusters = ["system.bigCluster", "system.littleCluster"]
    power_types = ["dynamicPower", "staticPower"]
    pm_states = ["", "pm0."]

    for cluster in clusters:
        for power_type in power_types:
            for pm_state in pm_states:
                # Adjusted pattern to be more flexible in matching power values
                pattern = rf"{cluster}\.cpus\.power_model\.{pm_state}{power_type}\s+([\d.]+)"
                power_values = extract_power_values(file_path, pattern)
                title = f"{cluster} {pm_state}{power_type} vs. Samples"
                filename = f"{cluster}_{pm_state}{power_type}_graph"
                plot_graph(power_values, title, filename)


if __name__ == "__main__":
    main()
